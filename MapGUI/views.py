# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from ThreatMap import settings
from django.http import JsonResponse
from django.shortcuts import render

import json
import requests

# Create your views here.
def AbuseIPDBLookup(ip, days=30):
    url = 'https://www.abuseipdb.com/check/{0}/json?key={1}&days={2}'.format(ip, settings.Abuse_DB_API, days)
    result = requests.get(url).json()
    categories_id = []
    categories = []
    if result[0]['status'] == '429':
      return {'ip': ip, 'count': 0, 'categories':categories}
    for report in result:
        if 'category' in report:
            for category_id in report['category']:
                if category_id not in categories_id:
                    categories_id.append(category_id)
                    categories.append(abuse_category_lookup(category_id))
    results = {'ip':ip, 'count':len(result), 'categories':categories}
    return results

def GeoIPLookup(ip, fields='ip,country_name,latitude,longitude'):
    url = 'http://api.ipstack.com/{0}?access_key={1}&fields={2}'.format(ip, settings.IPStackAPI, fields)
    result = requests.get(url).json()
    return result

def abuse_category_lookup(category):
    categories = {
      '3': 'Fraud orders',
      '4': 'DDoS Attack',
      '5': 'FTP Brute-Force',
      '6': 'Ping of Death',
      '7': 'Phishing',
      '8': 'Fraud VoIP',
      '9': 'Open Proxy',
      '10': 'Web Spam',
      '11': 'Email Spam',
      '12': 'Blog Spam',
      '13': 'VPN IP',
      '14': 'Port Scan',
      '15': 'Hacking',
      '16': 'SQL Injection',
      '17': 'Spoofing',
      '18': 'Brute-Force',
      '19': 'Bad Web Bot',
      '20': 'Exploited Host',
      '21': 'Web App Attack',
      '22': 'SSH',
      '23': 'IoT Targeted'
    }
    return categories[str(category)]

def process_threat_map(request):
    # took 1 min 22 secs - to process two IPs
    ips = ['31.184.192.185','196.52.43.113']
    results = []
    for ip in ips:
        # TODO - implement celery worker here
        abuse = AbuseIPDBLookup(ip)
        if abuse['count'] > 0:
            geo = GeoIPLookup(ip)
            results.append({'abuse':abuse, 'geo':geo})
    #results = [{'geo': {'longitude': 30.2642, 'ip': '31.184.192.185', 'latitude': 59.8944, 'country_name': 'Russia'}, 'abuse': {'count': 61, 'ip': '31.184.192.185', 'categories': ['Brute-Force', 'Web App Attack', 'DDoS Attack', 'Hacking', 'Ping of Death', 'Port Scan', 'Spoofing', 'Web Spam', 'Exploited Host', 'SQL Injection']}}, {'geo': {'longitude': -74.3499, 'ip': '196.52.43.113', 'latitude': 40.5186, 'country_name': 'United States'}, 'abuse': {'count': 98, 'ip': '196.52.43.113', 'categories': ['Port Scan', 'Hacking', 'Brute-Force', 'DDoS Attack', 'Web App Attack', 'FTP Brute-Force', 'SSH', 'Exploited Host']}}]
    print(results)
    return JsonResponse({'results':results})

def threat_map(request):
  ips = ['31.184.192.185','196.52.43.113']
  #ips = ["5.188.86.36", "77.72.82.87", "31.192.108.68", "77.72.82.101", "77.72.82.32", "92.63.193.90", "92.63.193.110", "92.63.193.75", "5.8.18.135", "178.159.37.99", "89.248.162.144", "89.248.168.118", "80.82.64.127", "80.82.77.139", "80.82.77.33", "80.82.70.118", "93.174.95.106", "185.10.68.228", "89.248.167.131", "93.174.93.166", "218.75.37.18", "58.218.205.75", "222.73.254.215", "60.191.38.77", "118.212.143.46", "183.131.83.50", "58.218.213.128", "202.102.144.117", "125.64.94.208", "202.101.6.82", "79.124.49.70", "79.124.56.134", "194.146.233.2", "62.73.92.190", "85.187.30.156", "46.55.148.3", "87.121.24.150", "87.120.190.164", "130.204.148.31", "188.254.204.76", "177.84.71.216", "187.115.165.204", "150.164.180.61", "186.233.223.2", "189.32.203.153", "179.217.124.37", "187.16.37.98", "187.111.194.90", "177.130.100.191", "177.142.30.3", "213.133.162.116", "46.201.247.65", "213.133.178.109", "193.106.30.50", "213.133.167.114", "193.201.224.232", "193.201.224.158", "185.59.159.83", "46.98.186.65", "46.119.28.191", "187.189.143.41", "192.100.176.130", "201.174.9.186", "187.188.81.240", "189.163.221.89", "148.240.74.162", "189.174.33.246", "187.144.233.106", "187.214.56.175", "187.130.43.237", "103.29.69.96", "139.162.120.76", "101.1.74.90", "139.162.118.185", "160.16.211.86", "103.29.70.204", "139.162.118.251", "139.162.125.159", "139.162.113.212", "139.162.121.251", "125.212.217.215", "125.212.217.214", "118.69.82.18", "103.79.143.182", "103.207.38.205", "125.212.252.110", "171.244.4.110", "14.184.169.192", "14.188.150.33", "103.207.39.67", "139.59.70.46", "106.51.127.163", "43.240.65.36", "103.210.135.136", "106.215.47.150", "43.228.94.229", "43.225.164.7", "103.58.116.8", "103.47.59.28", "43.225.26.165", "164.52.24.170", "164.52.24.178", "164.52.24.165", "164.52.24.166", "164.52.24.172", "164.52.24.180", "164.52.24.169", "164.52.24.171", "164.52.24.174", "164.52.24.176", "121.126.211.125", "211.233.46.76", "222.96.190.71", "221.153.24.208", "123.215.122.46", "121.254.176.67", "134.75.217.203", "45.119.43.245", "1.230.44.160", "121.151.53.150", "66.96.255.51", "101.128.73.194", "103.54.219.106", "202.46.1.40", "203.190.241.129", "118.96.235.36", "36.80.163.32", "203.160.62.218", "36.70.127.185", "43.230.5.42", "82.99.219.38", "185.120.239.183", "185.165.31.142", "82.99.219.37", "78.38.114.210", "78.38.102.4", "185.165.31.136", "185.23.131.15", "85.15.46.103", "37.235.30.107", "185.180.14.91", "46.234.125.89", "81.90.243.107", "5.59.131.158", "185.112.164.233", "185.151.174.87", "88.146.198.1", "81.31.40.98", "95.85.194.68", "88.146.182.226", "91.207.102.182", "188.213.49.233", "89.35.39.87", "89.35.39.46", "89.38.99.35", "89.35.39.73", "188.213.49.206", "94.176.148.78", "185.141.24.250", "188.212.103.157", "91.93.199.101", "46.1.113.90", "195.175.11.46", "94.102.12.2", "88.248.53.36", "188.3.34.120", "78.189.49.109", "81.213.148.108", "213.14.155.66", "85.96.192.75", "77.87.77.143", "77.87.77.141", "77.87.77.129", "77.87.77.142", "176.223.129.31", "77.87.77.140", "77.87.77.134", "188.117.148.178", "83.31.41.40", "89.234.195.82", "203.114.102.165", "202.183.221.92", "180.183.194.24", "203.154.39.72", "49.229.120.208", "183.88.59.159", "27.254.37.66", "122.155.193.59", "27.254.206.245", "43.249.57.255", "190.221.56.226", "201.213.18.67", "190.15.193.218", "152.169.145.11", "190.93.220.187", "190.96.118.63", "190.2.7.65", "190.189.96.181", "190.230.171.87", "201.212.18.221", "82.102.173.91", "212.143.80.14", "192.114.71.183", "79.181.45.108", "31.168.199.234", "80.179.255.78", "46.116.100.3", "62.90.180.72", "79.178.120.178", "82.81.211.248", "124.105.47.89", "122.2.223.242", "182.18.208.39", "203.177.173.46", "119.94.109.134", "202.65.183.2", "103.3.83.148", "122.55.251.114", "124.106.157.239", "112.209.175.175", "186.101.242.151", "191.100.8.155", "200.24.201.163", "190.94.141.97", "181.39.96.100", "186.46.136.138", "190.94.138.174", "181.113.22.190", "191.100.9.239", "181.113.173.56", "191.101.35.47", "188.214.128.74", "93.115.26.99", "80.240.9.59", "185.11.27.10", "78.61.151.238", "86.100.255.86", "88.119.227.88", "84.15.130.251", "84.15.43.86", "200.37.158.202", "200.48.235.123", "190.116.50.25", "181.176.212.42", "190.187.199.62", "190.8.137.18", "148.102.58.63", "181.65.138.129", "190.8.137.33", "200.41.111.72", "103.48.116.47", "103.11.194.106", "180.149.126.131", "180.149.126.141", "103.229.120.42", "103.229.121.81", "119.40.103.187", "124.158.111.35", "180.149.126.12", "180.149.126.132", "193.95.90.82", "197.24.240.111", "197.0.90.59", "41.226.254.64", "41.228.165.62", "196.203.11.226", "41.230.122.41", "154.105.23.129", "196.203.53.173", "197.0.162.245", "41.184.182.161", "41.184.187.33", "41.184.233.18", "41.184.236.84", "41.217.207.58", "45.222.101.167", "169.255.124.86", "196.46.20.25", "197.149.67.194", "197.210.144.197", "213.32.252.112", "159.255.163.19", "31.25.139.203", "37.237.234.7", "37.237.238.113", "95.170.208.42", "37.238.224.42", "176.241.89.114", "176.241.95.92", "185.136.150.46", "81.192.44.79", "105.154.6.224", "41.251.248.90", "105.145.148.155", "105.155.251.22", "160.176.42.252", "160.177.71.190", "160.179.10.225", "41.214.225.208", "41.250.219.142", "167.57.40.94", "167.60.34.171", "167.61.41.232", "179.24.9.168", "186.48.45.125", "186.48.76.227", "167.56.142.211", "167.56.156.212", "167.56.235.57", "167.56.39.32", "95.153.31.189", "213.219.122.171", "46.39.144.49", "62.65.55.22", "77.233.92.16", "80.235.83.127", "82.131.1.171", "82.131.5.124", "86.110.42.226", "193.194.92.112", "105.96.13.85", "105.96.40.129", "154.127.107.2", "105.105.89.89", "154.121.251.1", "196.41.253.118", "41.110.11.6", "203.81.72.222", "103.233.205.139", "103.233.206.214", "103.80.36.50", "41.191.105.178", "41.86.16.185"]
  return render(request, 'threat_map.html', {'ips':ips})

def ajax_process_ip(request):
  ip = request.GET.get('ip', None)
  abuse = AbuseIPDBLookup(ip)
  if abuse['count'] > 0:
    geo = GeoIPLookup(ip)
    if abuse['count'] > 50:
      abuse['count'] = 50
  else:
    geo = None
  return JsonResponse({'abuse': abuse, 'geo': geo})
